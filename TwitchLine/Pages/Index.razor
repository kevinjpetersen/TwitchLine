@page "/"
@inject IJSRuntime JsRuntime
@inject TwitchLineService TLS
@using System.Threading
@using TwitchLine.Data

<div id="twitchline-container">
    <div id="twitchline-cmd">
        <textarea @onclick="@(async() => { await FocusElement("twitchline-cmd-input"); })" id="twitchline-cmd-output" readonly>@CmdOutput</textarea>
        <b id="twitchline-cmd-input-icon">&gt;</b><input id="twitchline-cmd-input" @bind="CmdInput" type="text" @onkeyup="UI_CmdInputKeyUp" />
    </div>
    <div id="twitchline-video">
        <div id="twitchline-view"></div>
    </div>
</div>

@code {
    public string CmdOutput { get; set; } = "Welcome to TwitchLine v1.0!\r\nYou can use this as a regular command line or use some of the predefined commands from the docs.\r\n";
    public string CmdInput { get; set; }
    public bool IsFirstTime { get; set; }
    public bool IsCmdServiceRunning { get; set; }
    public bool IsCommandRunning { get; set; }

    protected override void OnInitialized()
    {
        TLS.CommandFinishedEvent = CmdProcess_CommandFinishedEvent;
    }

    private async void UI_CmdInputKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && string.IsNullOrWhiteSpace(CmdInput)) return;
        if (e.Key == "Enter" && await CheckSetChannelCommand(CmdInput)) return;

        if (e.Key == "Enter" && CmdInput.ToLower() == "stop")
        {
            TLS.KillProcess();
            TLS.CTS.Cancel();
            IsCommandRunning = false;
            CmdInput = "";
            AddOutputMessage("Cancelled current running command");
            await TwitchPlayerStop();
            await ScrollOutputToBottom();
            StateHasChanged();
            return;
        }

        if (e.Key == "Enter" && IsCommandRunning == false)
        {
            AddOutputMessage($"Running command: '{CmdInput}'");
            IsCommandRunning = true;
            StateHasChanged();
            await TwitchPlayerPlay();
            var tmpCmdInput = CmdInput;
            CmdInput = "";
            if (!await CheckPredefinedCommands(tmpCmdInput)) TLS.ExecuteCommand(tmpCmdInput);
            StateHasChanged();
        }
    }

    private async Task<bool> CheckSetChannelCommand(string command)
    {
        if (command.StartsWith("channel ", StringComparison.InvariantCultureIgnoreCase))
        {
            var channelName = command.Substring("channel ".Length);
            if (string.IsNullOrWhiteSpace(channelName)) return false;

            AddOutputMessage($"Changed channel to '{channelName}'");
            await TwitchPlayerSetChannel(channelName);
            await ScrollOutputToBottom();
            CmdInput = "";

            StateHasChanged();
            return true;
        }
        return false;
    }

    private async Task<bool> CheckPredefinedCommands(string command)
    {
        switch (command)
        {
            case "cls":
                CmdOutput = "";
                AddOutputMessage("Cleared Console");
                await TwitchPlayerStop();
                await ScrollOutputToBottom();
                IsCommandRunning = false;
                return true;
            case "IWannaHaveFun":
                AddOutputMessage("It's time for some fun! Enjoy your 2 minutes of no work!");
                await ScrollOutputToBottom();
                StateHasChanged();
                try
                {
                    await Task.Delay(TimeSpan.FromMinutes(2), TLS.CTS.Token);
                }
                catch
                {
                    TLS.CTS = new CancellationTokenSource();
                    AddOutputMessage("Seems like you really want to work huh? No problem!");
                }
                AddOutputMessage("Fun's over! Back to work!");
                await TwitchPlayerStop();
                await ScrollOutputToBottom();
                IsCommandRunning = false;
                return true;
            default: return false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstTime)
    {
        if (firstTime)
        {
            await TwitchSetup();
            await FocusElement("twitchline-cmd-input");
        }
    }

    private async void CmdProcess_CommandFinishedEvent(string output, string error)
    {
        IsCommandRunning = false;

        if (output == null && error == null)
        {
            AddOutputMessage("CMD Command was cancelled!");
        }
        else
        {
            AddOutputMessage(output.TrimEnd());
            if (!string.IsNullOrWhiteSpace(error)) AddOutputMessage(error);
        }

        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await TwitchPlayerStop();
            await ScrollOutputToBottom();
        });
    }

    private void AddOutputMessage(string message)
    {
        CmdOutput += $"{message}\r\n";
    }

    private void ClearOutput()
    {
        CmdOutput = "";
    }

    private async Task ScrollOutputToBottom()
    {
        await JsRuntime.InvokeVoidAsync("ScrollOutputToBottom", "twitchline-cmd-output");
    }

    private async Task TwitchSetup()
    {
        await JsRuntime.InvokeVoidAsync("TwitchEmbedStart", "Twitch");
    }

    private async Task TwitchPlayerStop()
    {
        await JsRuntime.InvokeVoidAsync("TwitchPlayerStop");
    }

    private async Task TwitchPlayerPlay()
    {
        await JsRuntime.InvokeVoidAsync("TwitchPlayerPlay");
    }

    private async Task TwitchPlayerSetChannel(string channelName)
    {
        await JsRuntime.InvokeVoidAsync("TwitchPlayerSetChannel", channelName);
    }

    private async Task FocusElement(string elementId)
    {
        await JsRuntime.InvokeVoidAsync("FocusElement", elementId);
    }
}